The interfaces we were given are fairly flexible, as there is an interface for the model as well as the controller. However, there does not seem to be a separate controller for the GUI inputs as well as a GUI view interface. I believe that implementing these two design factors would significantly improve the functionality and extensibility of the current program. Utilizing a FeaturesCommand interface which handles the GUI inputs would allow for extension of the program without changing code in existing interfaces, and risking the development of new bugs. I also notice that renderMessage and welcomeMessage, which are methods that handle the rendering of different messages, are placed in the controller. I believe that it would allow for greater organization as well as future extensibility for the view package to contain two interfaces; one handling rendering messages for the text based inputs, and another interface handling the GUI implementation. Keeping these two interfaces separate would be optimal design as they handle displaying different types of inputs, so it does not make sense to have the implementation within one interface. 
The implementation of the IModel interface is done mostly well; the different filtering methods are all functional and are correctly implemented within the ModelImpl. However, one caveat to the ModelImpl class may include the implementation of the load and save methods within the model. The load and save methods should go within the controller because the reading of different inputs should be handled by the controller. The controller is responsible for handling the way the user interacts with the program, and since the load and save methods directly read in the user inputs, they should be implemented within the controller. A suggestion for how to go about doing this without directly placing them within the controller interface, as this may cause some issues with the current implementation, is to place the load and save within the Utils class and call these methods accordingly. The controller implementation is done well, as the program utilizes the Command design pattern for the different image filtering methods. One disadvantage to this program is that it does not include the full implementation of the GUI view, as well as the controller which is meant to handle these inputs. We requested that they finish the GUI implementation; however if this cannot be done in time we will continue writing the new code with just the scripting implementation. The GUI code can be implemented using the design suggestions outlined above.
The documentation of the program is done clearly and succinctly. I am able to fully understand the functionality of each method/class/interface through the Javadoc. There are only a few methods within the Utils class which do not contain Javadoc; however, this does not significantly hinder my understanding of the program. I believe that this is a significant strength in their code. In addition to the documentation, I also believe that the utilization of the Command design pattern within the controller was done in a clear way which allows for future extensibility. Implementing the mosaicking method within the controller was not difficult in this regard. There are a few design/code limitations which I have explained above, but other than those I believe that this is a functional program which implements fairly good design.