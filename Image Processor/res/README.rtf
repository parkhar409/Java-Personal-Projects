{\rtf1\ansi\ansicpg1252\cocoartf2706
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;}
{\*\expandedcolortbl;;}
\paperw11905\paperh16837\margl1440\margr1440\vieww12900\viewh15280\viewkind0
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0

\f0\fs24 \cf0 Assignment 6:\
\
Changes:\
\
Abstracting the savePPM and saveOtherTypes methods into our ImageUtil class\
- We put these two methods within the ImageUtils class because we realized that we utilized them multiple times within our code. We utilize them in our Save function object within the controller as well as within the fileChooser method within our view. W realized it would be much more efficient and result in significantly less code duplication if these methods were placed in the Utils class.\
\
Placing loadPPM within the ImageUtils class\
- We placed the loadPPM method within the imageUtils class because we needed to use a load method which would return an image within our fileChooser method in ViewImpl. So we placed loadPPM in the ImageUtils in order for us to be able to call this method and properly load PPM files to our GUI. \
\
Adding new FeaturesImpl class in Controller package which implements the IFeatures interface\
- We added this new class and interface in order to handle the actions of the listeners from the view. Within the FeaturesImpl class we delegate to the view and model according the actions performed by the buttons and text box. \
\
Adding Histogram class within the view package \
- We add the histogram class within the view package in order to implement the functionality for the histogram to be displayed on the screen. \
\
Adding ViewImpl class which implements IView interface\
- we added the new ViewImpl class which supports the GUI for the program as well as a different way of handling the inputs. We decided that it would be best to create a new interface and class to make a clear distinction between handling inputs through the GUI and the interface which supports the text-based input handling from the Command line. \
\
Image Citation:\
https://www.google.com/url?sa=i&url=https%3A%2F%2Fwww.freeiconspng.com%2Fimages%2Fdog-png&psig=AOvVaw3nsNwCB5r10NLnu4L9rntz&ust=1669238862386000&source=images&cd=vfe&ved=0CA8QjRxqFwoTCMDvwr3dwvsCFQAAAAAdAAAAABAE\
\
Source: freeiconspng.com\
\
Assignment 5\
\
Changes:\
	Moved the Load and Save to the Controller\
		- We moved the load and save to the controller from the model because the load and save is not meant to handle user inputs such as the filePath. We made the model have the load put the image in the map, and removed the save from the model as it sufficiently writes the image in the controller. The controller now handles the actual scripting and loading the file. We put the load and save as private methods within the command class, and allowed the command class to call these private methods. \
\pard\pardeftab720\partightenfactor0
\cf0 \
Newly added methods/features :\
We added new image editing methods called filter and colorTransformation. \
Each method has two way of editing the image. Filter can either blur or sharpen the given image. \
colorTransformation can either turn the image into a grey-scaled image or a sepia-toned image. \
The actual functionality of the methods were added to our ImageModelImpl class. Following our original design pattern, we added the according \
commands to the hashmap of commands that the user can sue when using our controller. \
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0
\cf0 \
Reading different files :\
We also modified our project so that it can read different files. Before, our project could only handle ppm image files but now it supports image files such as jpg, png, etc. \
New method called loadOther in our Load class in the controller package handles the files that are not PPM.  \
\
Image Processor\
By Harrison Park & Khushi Patel \
\
Our design currently contains 3 packages : controller, model and view. \
\
Model Package : \
The model package contains interfaces and classes that deal with the components of image. The pixel class which implements IPixel interface, represents the coordinate and RGB values of a pixel. The Image class represents an image in the format of 2D array of Pixels. The ImageModelImpl class represents a model class that handles all the operations that have to do with an image. The operations include methods such as, save, load, grayscale, flip and imagecopy. And all these operational methods create a copy of a given image and manipulate the pixels of that copied image. We chose this design to prevent users from manipulating the values of the actual original image. \
\
Controller Package :\
Our controller package includes separate classes dedicated to each operation methods which can be called on our controller model. All those classes implement the ICommand interface which has a void method called commanOperation. This void method helps us calling whichever operation method we want on our controller. The ControllerImpl class includes commands in the form of of HashMap which maps the command statement to the commands objects and their inputs. This is then called in the start method which reads in these inputs and allows for the controller to call the different commands. We added a new FeaturesImpl class in the controller package which implements the IFeatures interface in order to handle the actions of the listeners from the view. Within the FeaturesImpl class we delegate to the view and model according the actions performed by the buttons and text box. \
\
view package :\
Our view package contains the ViewTextImpl class which implements the IViewText interface. The ViewTextImpl class has been designed so that we can simply render messages on our controller. It also contains the ViewImpl class which implements the IView interface which is our GUI for the program. The GUI allows for the images to be rendered on the screen and also contains different buttons which perform the different filtering operations to the image. The ViewImpl class contains different listeners for each of the buttons and the text box which is then given to the controller. It also has a fileChooser method which allows the user to choose a file from their computer and a saveFile method which allows the user to save a file to their computer. We also add the histogram class within the view package in order to implement the functionality for the histogram to be displayed on the screen.\
\
view.ImageUtil:\
The imageUtil class exists within the view package and includes a method which allows you to save ppm files as well as another method which allows you to save other types of files. This method is used in several parts in our code including within the save function object and the saveFile method within our view. We also have a method which allows us to load PPM files and returns an image which we utilize within our fileChooser. \
\
\
\
\
}